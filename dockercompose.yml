# docker-compose.yml
# Basic Docker Compose setup for Airflow with custom code and data volume

version: '3.8'

x-airflow-common:
  # Define common settings for Airflow services
  build:
    context: . # Build from the current directory
    dockerfile: Dockerfile # Use the custom Dockerfile
    args:
      AIRFLOW_VERSION: 2.8.1 # Specify the Airflow version
      PYTHON_VERSION: 3.9 # Specify the Python version
      # Install extra packages needed by your hooks/operators if any
      # AIRFLOW_EXTRAS: postgres,cncf.kubernetes
      # Install custom Python packages from requirements.txt
      INSTALL_REQUIREMENTS: "true"
  environment:
    # Configure Airflow database connection
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql://airflow:airflow@postgres/airflow
    # Configure Airflow executor (LocalExecutor is simple for testing)
    # For multiple workers, you'd use CeleryExecutor with Redis
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    # AIRFLOW__CORE__EXECUTOR: CeleryExecutor # Example for multiple workers
    # AIRFLOW__REDIS__HOST: redis # Needed for CeleryExecutor

    # Configure Airflow webserver secret key
    AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_WEBSERVER_SECRET_KEY:-$(python -c 'import secrets; print(secrets.token_hex(16))')}
    # Disable tracking (optional)
    AIRFLOW__CORE__DAG_SHUFFLE_MODULES: "False"
    AIRFLOW__CORE__LOAD_EXAMPLES: "False" # Don't load example DAGs

    # Set timezone (optional, but good practice)
    AIRFLOW__CORE__DEFAULT_TIMEZONE: Asia/Ho_Chi_Minh # Example: Ho Chi Minh City
    TZ: Asia/Ho_Chi_Minh

    # Set Airflow Home
    AIRFLOW_HOME: /opt/airflow

  # Mount volumes for DAGs, logs, plugins, and our data
  volumes:
    # Mount your local 'dags' folder into the container's dags folder
    # This makes your DAG files and custom scripts available to Airflow
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins # If you use Airflow plugins
    # Mount the named volume for persistent data storage
    - traffic_data_volume:/opt/airflow/traffic_data # Mounts the named volume to the data folder inside container

  # Define network for internal communication
  networks:
    - airflow_network

  # Restart policy
  restart: always

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow_pgdata:/var/lib/postgresql/data
    networks:
      - airflow_network
    restart: always

  # redis: # Needed for CeleryExecutor
  #   image: redis:latest
  #   networks:
  #     - airflow_network
  #   restart: always

  airflow-webserver:
    <<: *x-airflow-common # Inherit common settings
    command: webserver
    ports:
      - "8080:8080" # Map host port 8080 to container port 8080 (Airflow UI)
    depends_on:
      - postgres
      # - redis # Needed if using CeleryExecutor
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 30s
      retries: 5

  airflow-scheduler:
    <<: *x-airflow-common # Inherit common settings
    command: scheduler
    depends_on:
      - postgres
      # - redis # Needed if using CeleryExecutor
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"] # Can point to webserver health check
      interval: 30s
      timeout: 30s
      retries: 5

  # airflow-worker: # Example worker service (needed for CeleryExecutor)
  #   <<: *x-airflow-common # Inherit common settings
  #   command: worker
  #   depends_on:
  #     - scheduler # Workers depend on scheduler in some setups
  #     - redis
  #   healthcheck:
  #     test: ["CMD", "curl", "--fail", "http://localhost:8080/health"] # Can point to webserver health check
  #     interval: 30s
  #     timeout: 30s
  #     retries: 5


volumes:
  airflow_pgdata:
  airflow_dags:
  airflow_logs:
  airflow_plugins:
  traffic_data_volume: # Define the named volume for your data

networks:
  airflow_network:
    driver: bridge

